// Automatically generated by MockGen. DO NOT EDIT!
// Source: go-inject/inject (interfaces: Provider)

package mock_inject

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return _m.recorder
}

// GetContext mocks base method
func (_m *MockProvider) GetContext() reflect.Type {
	ret := _m.ctrl.Call(_m, "GetContext")
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// GetContext indicates an expected call of GetContext
func (_mr *MockProviderMockRecorder) GetContext() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetContext")
}

// GetName mocks base method
func (_m *MockProvider) GetName() string {
	ret := _m.ctrl.Call(_m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (_mr *MockProviderMockRecorder) GetName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetName")
}

// GetType mocks base method
func (_m *MockProvider) GetType() reflect.Type {
	ret := _m.ctrl.Call(_m, "GetType")
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// GetType indicates an expected call of GetType
func (_mr *MockProviderMockRecorder) GetType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetType")
}

// IsComplete mocks base method
func (_m *MockProvider) IsComplete() bool {
	ret := _m.ctrl.Call(_m, "IsComplete")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsComplete indicates an expected call of IsComplete
func (_mr *MockProviderMockRecorder) IsComplete() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsComplete")
}

// Resolve mocks base method
func (_m *MockProvider) Resolve() interface{} {
	ret := _m.ctrl.Call(_m, "Resolve")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Resolve indicates an expected call of Resolve
func (_mr *MockProviderMockRecorder) Resolve() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resolve")
}
