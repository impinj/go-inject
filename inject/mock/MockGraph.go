// Automatically generated by MockGen. DO NOT EDIT!
// Source: go-inject/inject (interfaces: Graph)

package mock_inject

import (
	gomock "github.com/golang/mock/gomock"
	inject "go-inject/inject"
	reflect "reflect"
)

// MockGraph is a mock of Graph interface
type MockGraph struct {
	ctrl     *gomock.Controller
	recorder *MockGraphMockRecorder
}

// MockGraphMockRecorder is the mock recorder for MockGraph
type MockGraphMockRecorder struct {
	mock *MockGraph
}

// NewMockGraph creates a new mock instance
func NewMockGraph(ctrl *gomock.Controller) *MockGraph {
	mock := &MockGraph{ctrl: ctrl}
	mock.recorder = &MockGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockGraph) EXPECT() *MockGraphMockRecorder {
	return _m.recorder
}

// Complete mocks base method
func (_m *MockGraph) Complete(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "Complete", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete
func (_mr *MockGraphMockRecorder) Complete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Complete", arg0)
}

// Find mocks base method
func (_m *MockGraph) Find(_param0 reflect.Type, _param1 reflect.Type, _param2 string) (interface{}, error) {
	ret := _m.ctrl.Call(_m, "Find", _param0, _param1, _param2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (_mr *MockGraphMockRecorder) Find(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Find", arg0, arg1, arg2)
}

// Provide mocks base method
func (_m *MockGraph) Provide(_param0 ...inject.Provider) {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Provide", _s...)
}

// Provide indicates an expected call of Provide
func (_mr *MockGraphMockRecorder) Provide(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Provide", arg0...)
}

// Resolve mocks base method
func (_m *MockGraph) Resolve() error {
	ret := _m.ctrl.Call(_m, "Resolve")
	ret0, _ := ret[0].(error)
	return ret0
}

// Resolve indicates an expected call of Resolve
func (_mr *MockGraphMockRecorder) Resolve() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resolve")
}
